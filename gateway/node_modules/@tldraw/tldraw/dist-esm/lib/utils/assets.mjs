import downscale from "downscale";
import { getBrowserCanvasMaxSize } from "../shapes/shared/getBrowserCanvasMaxSize.mjs";
import { isAnimated } from "./assets/is-gif-animated.mjs";
function containBoxSize(originalSize, containBoxSize2) {
  const overByXScale = originalSize.w / containBoxSize2.w;
  const overByYScale = originalSize.h / containBoxSize2.h;
  if (overByXScale <= 1 && overByYScale <= 1) {
    return originalSize;
  } else if (overByXScale > overByYScale) {
    return {
      w: originalSize.w / overByXScale,
      h: originalSize.h / overByXScale
    };
  } else {
    return {
      w: originalSize.w / overByYScale,
      h: originalSize.h / overByYScale
    };
  }
}
async function getResizedImageDataUrl(dataURLForImage, width, height, opts = {}) {
  let desiredWidth = width * 2;
  let desiredHeight = height * 2;
  const { type = "image/jpeg", quality = 0.92 } = opts;
  const canvasSizes = await getBrowserCanvasMaxSize();
  const aspectRatio = width / height;
  if (desiredWidth > canvasSizes.maxWidth) {
    desiredWidth = canvasSizes.maxWidth;
    desiredHeight = desiredWidth / aspectRatio;
  }
  if (desiredHeight > canvasSizes.maxHeight) {
    desiredHeight = canvasSizes.maxHeight;
    desiredWidth = desiredHeight * aspectRatio;
  }
  if (desiredWidth * desiredHeight > canvasSizes.maxArea) {
    const ratio = Math.sqrt(canvasSizes.maxArea / (desiredWidth * desiredHeight));
    desiredWidth *= ratio;
    desiredHeight *= ratio;
  }
  return await downscale(dataURLForImage, desiredWidth, desiredHeight, { imageType: type, quality });
}
const DEFAULT_ACCEPTED_IMG_TYPE = ["image/jpeg", "image/png", "image/gif", "image/svg+xml"];
const DEFAULT_ACCEPTED_VID_TYPE = ["video/mp4", "video/quicktime"];
async function isGifAnimated(file) {
  return await new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = () => reject(reader.error);
    reader.onload = () => {
      resolve(reader.result ? isAnimated(reader.result) : false);
    };
    reader.readAsArrayBuffer(file);
  });
}
export {
  DEFAULT_ACCEPTED_IMG_TYPE,
  DEFAULT_ACCEPTED_VID_TYPE,
  containBoxSize,
  getResizedImageDataUrl,
  isGifAnimated
};
//# sourceMappingURL=assets.mjs.map
